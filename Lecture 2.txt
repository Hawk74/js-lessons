слайд 1
	Привет, я рад всех вас видеть.
	Немного пошутить про ПХП разработчиков:-)

слайд 2

Для работы нам нужна рабочая среда для запуска наших скриптов, поэтому откроем программу хром
Нажмите кнопку F12
Открылся инструмент разработчика 
Откроем вкладку sources
Создадим на свое рабочем столе папку javaScript
Перетащим и бросим в окно браузера папку JavaScript
Браузер запрашивает нас разрешить ему записывать файлы в эту папку
Выбираем вариант разрешить
Все мы готовы к работе.



Привет, мир!

Ну куда же без привет мир ? Вот и я думаю что это уже необходимость начинать все курсы по программированию с привет мир

Давайте обозначим нашу цель как пользователь этой программы. Подумаем что будет делать наша программа ?

Чтобы ответить на этот вопрос нужна некая идея или концепция сейчас люди создают сумасшедшие приложения используя сумасшедшие идеи.

Выбирается методология для организации процесса разработки в нашем случае Agile Scrum на мой самая гибкая 

Идея делится на возможности:


Как пользователь я хочу видеть всплывающее окно с текстом привет мир чтобы я чувствовал что программа рада видеть меня.
…….

 Очень просто.





Помните, что мы можем делить Любые проблемы на маленькие проблемки. Составим простой список ту-ду

Создать папку
Создать index.html
Открыть файл в браузере
Открыть инструменты разработчика
Вбросить папку в браузер
Разрешить
Открыть ресурсы / файловые
В файл добавить разметку документа
Добавить элемент script
Выполнить инструкцию alert с текстом hello world
Протестировать 
Улучшить
Протестировать
Показать заказчику

Офигеть какой длинный список получился.

Но в том то и суть что слона всегда надо есть по кусочкам.

Сделать первые 7 пунктов


Шаг 8


Браузер отображает html документы которые  стандартизированы.  Все элементы разметки документа и то как они могут располагаться  в документе какие имеют свойства закреплены стандартом.

Всегда помните, что джаваскрипт и html очень вольные языки и прощают некоторые ошибки (расказать парочку проблем связанных с валидацией) В современных инструментах разработчика при попытке добавить элемент не в том порядке или передать ему не верные параметры среда разработки покажет ошибку

Размечаем документ чтобы запустить программу.

<!DOCTYPE HTML>
<html>
<head>
    <script>
    alert( 'Привет, мир!' );
  </script>
</head>
<body></body>
</html>

Первое что мы должны с вами сделать это указать тип документа который мы с вами собираемся отобразить в браузере. Для этого воспользуемся элементом <!DOCTYPE>  в нашем файле index.html запишем следующий элемент <!DOCTYPE html> 

Как я уже ранее говорил язык гипертекстовой разметки подчиняется стандарту и существуют некоторые  Спецификации по версиям. На текущей момент это HTML 5
подробнее о том какие еще есть типы документов  и больше о стандартах вы сможете узнать прочитав статью по этой ссылке

Дальше укажем начало нашего документа записав следующую строку элемент html для его записи используют открывающий  тег <html> и закрывающий тег </html> у некоторых элементов есть только открывающий тег а закрывающий может быть опциональным или не предусмотрен спецификацией полный список элементов вы можете найти по ссылке в вашем методическом пособии. 
 
Следующий элемент head этот элемент содержит разные ресурсы описания и прочие заголовочные файлы

Так как мы собираемся писать программу дваскрипт в документе весь код нужно заключать в теки скрипт. В современном в стародавние времена нужно было указать некоторые атрибуты тега скрипт такие как type и language. Тип использовался для указания типа скрипта = text/javascript
язык для указания языка скрипта.

Внутри элемента head добавим элемент script используя пару тегов

Внутри элемента скрипт добавим вызов операции alert(“Привет Мир”);

Перезагрузим страницу браузера

Видим окошко с нашим текстом 

Теперь представьте что я браузер и рассказываю как я работаю по шагам

1 Вы как пользователь попросили меня открыть документ путь
2 Я как браузер сделал запрос этого документа по указанной ссылке
3 Документ получен
4 Анализирую содержимое документа
5 Вижу что это HTML
5 Читаю секцию header

6 Загружаю внешние ресурсы (Картинки стилизации элементов внешние скрипты и прочее)
7 запускаю выполнение скриптов
строю DOM 



Итак что же можно улучшить ? 
Какие очевидные проблемы имеются ?

Предположим, что заказчик начнет увеличивать количество возможностей наш элемент скрипт быстро разрастется и в определенный момент будет очень трудно добавлять новые возможности. А так же ошибки в программе их тоже придется исправлять хотим мы этого или нет.


Я сейчас сделаю это как эксперт из лиги пхп разработчиков 
так сказать решение в лоб самое простое и эффективное по их мнению но как вы поймёте дальше решение работает лишь от части.

Как же победить рост элемента ? Для меня очевидно что самое простое перенести его содержимое в отдельный файл и в самом документе эйчтиэмель в секции хэдерс в элемент мы будем просто загружать содержимое файла программы  в документ указывая атрибут элемента скрипт и внутрь уже ничего не будет добавляться это позволит победить его рост. Но как уже ясно это не решает основную проблему. 

Какие есть плюсы у этого решения отдельные файлы браузер сохраняет на устройстве клиента и при повторном открытии если он не менялся браузер уже загрузит этот файл с устройства а не через интернет соединение.

Что происходит на самом деле когда мы указываем атрибут срц ? Условно можно сказать что браузер заменит все содержимое между тегами элемента поэтому бессмысленно туда что то писать после указания атрибута.




Структура кода

Код состоит из инструкций разделенных символом точка с запятой (;) это обычно пишут во всех учебниках.

Символ, зарезервированное слово, выражение, оператор, команда все это условно называют инструкцией другими словами код программы это множество инструкций разделенных символом (;)

давайте посмотрим текст программы:

alert(‘Привет мир!’);

на первой строчке видим Вызов Команды alert  с указанием формального параметра строки Привет мир точка с запятой завершают инструкцию




как вы понимаете по мимо alert есть и другие команды все команды 

Теперь давайте посмотрим н


символ комментария это - // - если в начале строки с инструкцией добавить этот символ то выполнение этой инструкции не будет выполнятся

иногда нектоторые программисты добавляют в свой код коментарии о том как он устроен и считают это хорошей практикой я же заявляю что  правильно написанный код не нуждается в комментариях. 

Также есть способ закомментировать целый кусок кода на 1 и более строк для этого используют символ пару символов /* и */ все между этими символами не будте исполняться.

Вкладывать многострочные комментарии нельзя!

Также существуют самые полезные комментарии это документационные комментарии 

/**
@param a - Параметр а это число
@param b - Параметр а это число
@result number Результат работы функции
/






